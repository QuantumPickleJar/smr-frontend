{"version":3,"file":"TagList.075b6703.js","sources":["../../../../../../src/lib/components/utils/TagList.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { GetTagsDocument } from '$lib/generated/graphql';\n  import type { Tag } from '$lib/generated/graphql';\n  import { queryStore, getContextClient } from '@urql/svelte';\n\n  const client = getContextClient();\n\n  const getAllTags = queryStore({\n    query: GetTagsDocument,\n    client,\n    variables: {}\n  });\n\n  export let tags: Tag[] = [];\n  export let editable = false;\n\n  // let inputA: Input;\n  //\n  // let shake = false;\n  //\n  // let allTags: Tag[] = [];\n  // let filteredTagsMatched: Tag[] = [];\n  // let filteredTagsUnmatched: Tag[] = [];\n  //\n  // let newTagText: string;\n  //\n  // let newTag: HTMLInputElement;\n  // let newTagContainer: HTMLElement = null;\n  // let surface: MenuSurface;\n  //\n  let focused = false;\n  //\n  // $: newTag = inputA?.getElement();\n  //\n  // function filterAvailableTags(tagList: Tag[], currentTags: Tag[], filterText: string): [Tag[], Tag[]] {\n  //   if (!tagList || !currentTags) {\n  //     return [tagList, tagList];\n  //   }\n  //   let unfiltered = tagList.filter((tag) => !currentTags.find((t) => t.id == tag.id));\n  //   const filtered = unfiltered.filter((tag) => !newTag || tag.name.startsWith(filterText));\n  //   unfiltered = unfiltered.filter((tag) => filtered.findIndex((t) => t.id === tag.id) === -1);\n  //   return [filtered, unfiltered];\n  // }\n  //\n  // function updateTags() {\n  //   tags = tags;\n  //   [filteredTagsMatched, filteredTagsUnmatched] = filterAvailableTags(allTags, tags, newTagText);\n  // }\n  //\n  // $: if (editable) {\n  //   if (!$getAllTags.fetching && !$getAllTags.error) {\n  //     allTags = $getAllTags.data?.getTags || [];\n  //     updateTags();\n  //   }\n  // }\n  //\n  // function setTagText(text: string) {\n  //   newTagText = text;\n  //   newTag.value = newTagText;\n  // }\n  //\n  // export function setTextRange(el: HTMLInputElement, start: number, end: number): void {\n  //   el.focus();\n  //   if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {\n  //     el.setSelectionRange(start, end);\n  //   }\n  // }\n  //\n  // export function placeCaretAtEnd(el: HTMLInputElement): void {\n  //   el.focus();\n  //   if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {\n  //     el.setSelectionRange(el.value.length, el.value.length);\n  //   }\n  // }\n  //\n  // function addTag(newTagObj: string | Tag) {\n  //   if (!allTags) {\n  //     return false;\n  //   }\n  //   const tagToAdd = allTags.find((tag) => {\n  //     if (typeof newTagObj == 'string') {\n  //       return newTagObj == tag.name || newTagObj == tag.id;\n  //     } else {\n  //       return newTagObj.id == tag.id;\n  //     }\n  //   }) as Tag;\n  //   if (tagToAdd && !tags.find((tag) => tag.id == tagToAdd.id)) {\n  //     tags.push(tagToAdd);\n  //     updateTags();\n  //     return true;\n  //   }\n  //   updateTags();\n  //   return false;\n  // }\n  //\n  // function deleteTag(tag: Tag) {\n  //   tags = tags.filter((v) => v != tag);\n  //   updateTags();\n  // }\n  //\n  // function newTagKeydown(e: Event) {\n  //   if (!(e instanceof KeyboardEvent)) {\n  //     return;\n  //   }\n  //   if (e.code == 'Backspace') {\n  //     if (newTag.value == '') {\n  //       setTagText(tags.pop().name);\n  //       placeCaretAtEnd(newTag);\n  //       tags = tags;\n  //       e.preventDefault();\n  //       updateTags();\n  //     }\n  //   } else if (e.code == 'Enter') {\n  //     e.preventDefault();\n  //     if (addTag(newTag.value)) {\n  //       setTagText('');\n  //       updateTags();\n  //     } else {\n  //       shake = true;\n  //       setTimeout(() => (shake = false), 500);\n  //     }\n  //   } else {\n  //     const newText = newTagText + e.key;\n  //     const [available] = filterAvailableTags(allTags, tags, newText);\n  //     if (available && available.length > 0) {\n  //       newTag.value = available[0].name;\n  //       setTextRange(newTag, newTagText.length + 1, newTag.value.length);\n  //       e.preventDefault();\n  //       newTagText = newText;\n  //       updateTags();\n  //     }\n  //   }\n  // }\n  //\n  // function onFocusLost() {\n  //   setTimeout(() => {\n  //     if (newTagContainer && !newTagContainer.contains(document.activeElement)) {\n  //       surface.setOpen(false);\n  //     }\n  //   }, 200);\n  // }\n  //\n  // function onInput(e: Event) {\n  //   newTagText = newTag.value;\n  //   updateTags();\n  //   e.preventDefault();\n  // }\n</script>\n\n<div class=\"tags\" on:focusin={() => (focused = true)} on:focusout={() => (focused = false)}>\n  {#if !editable}\n    {#if tags.length > 0}\n      <div class=\"flex flex-row flex-wrap text-sm gap-1\">\n        {#each tags as tag}\n          <div class=\"text-neutral-300 lowercase\">\n            <span class=\"text-orange-500\">#</span>{tag.name}\n          </div>\n        {/each}\n      </div>\n    {/if}\n  {:else}\n    <!-- TODO -->\n    <!--    <Textfield class=\"tags overflow-visible\" bind:input={inputA} style=\"z-index: 9999\">-->\n    <!--      <FloatingLabel-->\n    <!--        class=\"pb-2\"-->\n    <!--        for=\"input-manual-a\"-->\n    <!--        slot=\"label\"-->\n    <!--        floatAbove={(newTag && newTag.value.length > 0) || focused || tags.length > 0}>Tags</FloatingLabel>-->\n    <!--      <div class=\"flex flex-row flex-wrap text-sm gap-1 mr-2\">-->\n    <!--        {#each tags as tag}-->\n    <!--          <div class=\"text-neutral-300 whitespace-nowrap flex removable-tag\">-->\n    <!--            <span class=\"hashtag text-orange-500\">#</span>-->\n    <!--            <span class=\"cancel\">-->\n    <!--              <i-->\n    <!--                class=\"material-icons mdc-chip__icon mdc-chip__icon&#45;&#45;trailing\"-->\n    <!--                on:click={() => deleteTag(tag)}-->\n    <!--                on:keypress={() => deleteTag(tag)}>cancel</i>-->\n    <!--            </span>-->\n    <!--            <p>{tag.name}</p>-->\n    <!--          </div>-->\n    <!--        {/each}-->\n    <!--        <div-->\n    <!--          id=\"newTagContainer\"-->\n    <!--          class=\"text-neutral-300 whitespace-nowrap flex\"-->\n    <!--          bind:this={newTagContainer}-->\n    <!--          on:focusin={() => surface.setOpen(true)}-->\n    <!--          on:focusout={onFocusLost}>-->\n    <!--          <MenuSurface bind:this={surface} managed={true} anchorCorner=\"BOTTOM_LEFT\" anchorElement={newTag}>-->\n    <!--            <div style=\"margin: 1rem\">-->\n    <!--              <h1>Available Tags</h1>-->\n    <!--              <div class=\"flex flex-wrap m-1\">-->\n    <!--                <Set chips={filteredTagsMatched} let:chip key={(tag) => tag.name}>-->\n    <!--                  <Chip {chip} on:SMUIChip:interaction={() => addTag(chip.name)}>-->\n    <!--                    <Text>{chip.name}</Text>-->\n    <!--                  </Chip>-->\n    <!--                </Set>-->\n    <!--              </div>-->\n    <!--              <div class=\"flex flex-wrap m-1\">-->\n    <!--                <Set chips={filteredTagsUnmatched} let:chip key={(tag) => tag.name}>-->\n    <!--                  <Chip {chip} on:SMUIChip:interaction={() => addTag(chip.name)}>-->\n    <!--                    <Text>{chip.name}</Text>-->\n    <!--                  </Chip>-->\n    <!--                </Set>-->\n    <!--              </div>-->\n    <!--            </div>-->\n    <!--          </MenuSurface>-->\n    <!--          {#if focused}-->\n    <!--            <span class=\"text-orange-500\">#</span>-->\n    <!--          {/if}-->\n    <!--          <Input-->\n    <!--            id=\"input-manual-a\"-->\n    <!--            spellcheck=\"false\"-->\n    <!--            autocomplete=\"off\"-->\n    <!--            class=\"inline text-sm text-neutral-300 {shake ? 'shake' : ''}\"-->\n    <!--            style=\"height: initial\"-->\n    <!--            bind:this={inputA}-->\n    <!--            on:keydown={newTagKeydown}-->\n    <!--            on:input={onInput} />-->\n    <!--        </div>-->\n    <!--      </div>-->\n    <!--    </Textfield>-->\n  {/if}\n</div>\n\n<style lang=\"scss\">\n  .removable-tag {\n    .cancel {\n      display: none;\n      cursor: pointer;\n\n      i {\n        padding: 0;\n        margin: 0;\n      }\n    }\n\n    &:hover {\n      .hashtag {\n        display: none;\n      }\n\n      .cancel {\n        display: initial;\n      }\n    }\n  }\n</style>\n"],"names":["ctx","length","create_if_block_1","i","insert_hydration_dev","target","div","anchor","t1_value","name","append_hydration_dev","span","dirty","set_data_dev","t1","create_if_block","client","getContextClient","getAllTags","queryStore","query","GetTagsDocument","variables","tags","$$props","editable","focused","focusin_handler","$$invalidate","focusout_handler"],"mappings":"qgBAuJSA,EAAI,CAACC,EAAAA,OAAS,GAACC,EAAAF,8HAAfA,EAAI,CAACC,EAAAA,OAAS,mOAERD,EAAI,iCAATC,OAAIE,GAAA,sTADRC,EAMKC,EAAAC,EAAAC,CAAAA,8EALIP,EAAI,CAAA,yBAATC,OAAIE,GAAA,EAAA,iHAAJF,6KAEyCO,EAAAR,KAAIS,KAAI,wDAAjB,uHAAA,GAAA,kMADhCL,CAAAA,EAEKC,EAAAC,EAAAC,CADHG,EAAAA,EAAsCJ,EAAAK,CAAAA,uCAAC,CAAAC,EAAA,GAAAJ,KAAAA,EAAAR,KAAIS,KAAI,KAAAI,EAAAC,EAAAN,wLALnDR,EAAQ,CAAA,IAAAe,uNADhBX,CAAAA,EAyEKC,EAAAC,EAAAC,CAAAA,uXAzNG,CAAA,EAAA,MAAAS,EAASC,EAAAA,EAETC,EAAaC,EAAU,CAC3BC,MAAOC,EACPL,OACAM,EAAAA,UAAS,CAAA,CAAA,CAAA,WAGAC,EAAI,CAAA,CAAA,EAAAC,EACJ,CAAAC,SAAAA,EAAW,EAAKD,EAAAA,EAgBvBE,EAAU,0KAuHqB,EAAA,MAAAC,EAAA,IAAAC,EAAA,EAAAF,EAAU,EAAA,EAA2BG,EAAA,IAAAD,EAAA,EAAAF,EAAU"}