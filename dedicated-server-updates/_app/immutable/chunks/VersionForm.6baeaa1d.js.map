{"version":3,"file":"VersionForm.6baeaa1d.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  let foundSML = false;\n  for (const dependency of parsed.Plugins) {\n    if (dependency.Name === 'SML') {\n      foundSML = true;\n      break;\n    }\n  }\n\n  if (!foundSML) {\n    return {\n      message: 'mod must depend on SML'\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Do not allow multi-target mods for now\n        return {\n          message: 'multi-target mods are not allowed'\n        };\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import Textfield from '@smui/textfield';\n  import Button from '@smui/button';\n  import { VersionStabilities } from '$lib/generated';\n  import Select, { Option } from '@smui/select';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Alpha\n  };\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Select bind:value={$data.stability} label={$t('stability')}>\n        <Option value=\"alpha\">Alpha</Option>\n        <Option value=\"beta\">Beta</Option>\n        <Option value=\"release\">Release</Option>\n      </Select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')}:</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.changelog}\n          label={$t('changelog')}\n          required\n          input$rows={10} />\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\" {disabled}>{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply underline text-yellow-500;\n  }\n</style>\n"],"names":["Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","basename","path","parts","split","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","catch","err","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","target","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","join","SemVersion","undefined","create_if_block_5","if_block1","create_if_block_3","create_if_block_2","p","br0","br1","t2","t2_value","strong","i","create_if_block_4","each_value","innerHTML","raw_value","t9_value","t11_value","select_props","create_if_block","textfield_props","handle_promise","promise","markdown","info","form_1","div6","div0","div3","div1","div2","div4","a","div5","select_changes","textfield_changes","t9","t11","t","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Alpha","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$$self","$$","not_equal","$data","preview"],"mappings":"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"}