{"version":3,"file":"VersionForm.DyQYz-mu.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    GameVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n      BasePlugin?: boolean;\n      Optional?: boolean;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  if (!parsed.GameVersion) {\n    return {\n      message: `missing GameVersion in ${modReference}.uplugin`\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import { VersionStabilities } from '$lib/generated';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Release\n  };\n  export let submitIcon: string;\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n  $: dependencies = $modMeta?.uplugin?.Plugins?.filter((d) => !d.BasePlugin) || [];\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label class=\"label\">\n        <span>{$t('stability')} *</span>\n        <select class=\"select\" bind:value={$data.stability}>\n          <option value=\"alpha\">Alpha</option>\n          <option value=\"beta\">Beta</option>\n          <option value=\"release\">Release</option>\n        </select>\n      </label>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')} *</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n\n            <span><strong>Game version:</strong> {$modMeta.uplugin.GameVersion}<br /></span>\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each dependencies as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"split grid gap-6\">\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <label class=\"label\">\n          <span>{$t('changelog')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.changelog} required rows={10} />\n        </label>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <button class=\"variant-ghost-primary btn\" type=\"submit\" {disabled}>\n        <span class=\"material-icons pr-2\">{submitIcon}</span>\n        {submitText}\n      </button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply text-yellow-500 underline;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","GameVersion","basename","path","parts","split","dirname","slice","join","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","some","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","t12_value","SemVersion","undefined","create_if_block_5","if_block1","Plugins","create_if_block_3","create_if_block_2","p","br0","br1","span2","strong2","br2","t12","t2","t2_value","strong","i","Name","create_if_block_4","each_value","ensure_array_like_dev","html_tag","raw_value","t9_value","t14_value","t18_value","t20_value","create_if_block","handle_promise","promise","markdown","info","add_render_callback","call","select","form_1","div6","div0","label0","option0","option1","option2","select_option","div3","div1","label1","textarea","set_input_value","div2","div4","a","div5","button","span3","t9","t14","t18","t20","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Release","submitIcon","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$data","select_value","this","preview","dependencies","$modMeta","d","BasePlugin"],"mappings":"kxBA+BA,MAAMA,GAAkBC,OAAOC,KAAKC,EAAAA,EACjCC,IAAKC,GAAQF,GAAWE,IACxBC,OAAQC,GAAAA,OAAiBA,GAAU,QAEtC,EAAMC,GAAkBC,MACtBC,EACAC,IAAAA,CAEM,MAAAC,EAAeC,MAAAA,GAAoBH,GAErC,GAAAE,EAAOE,QAAU,EACZ,MAAA,CACLC,QAAS,WAAWJ,YACpBK,SAAUJ,CAAAA,EAIR,MAAAK,EAASC,KAAKC,MAAMT,CAAAA,EAEtB,OAACO,EAAOG,YAMLH,EALE,CACLF,QAAS,0BAA0BJ,CAEvC,UAAA,CAEO,EAGT,SAASU,GAASC,EACV,CAAA,MAAAC,EAAQD,EAAKE,MAAM,KAClB,OAAAD,EAAMA,EAAMT,OAAS,CAAA,CAC9B,CAEA,SAASW,GAAQH,EAAAA,CACT,MAAAC,EAAQD,EAAKE,MAAM,GAClB,EAAA,OAAAD,EAAMG,MAAM,EAAGH,EAAMT,OAAS,CAAGa,EAAAA,KAAK,IAC/C,CAEA,MAAMC,GAAiBnB,MACrBoB,EACAlB,IAEe,IAAImB,KAIdC,UAAUF,CACVG,EAAAA,KAAKvB,MAAOwB,GACL,CAAA,MAAAC,EAAeD,EAAI3B,OAAQ6B,GAAad,GAASc,CAAaxB,GAAAA,EAAe,YAE/E,GAAAuB,EAAapB,SAAW,EACnB,MAAA,CACLC,QAAS,4BAA8BJ,EAAe,gBAE1D,EAEI,GAAAuB,EAAapB,SAAW,GAAKoB,EAAa,CAAA,EAAGE,OAASzB,EAAe,WAAY,CAE7E0B,MAAAA,EAAoB7B,MAAAA,GAAAA,MAAsB0B,EAAa,CAAGzB,EAAAA,MAAM,UAAWE,CAEjF,EAAA,MAAI,YAAa0B,EACRA,EAGF,CACLC,QAASD,EACTE,QAAStC,OAAOC,KAAK+B,EAAIO,KAAOlC,EAAAA,OAC7BmC,GAAMA,EAAEC,SAAS,KAAA,GAAUD,EAAEC,SAAS,MAAA,GAAWD,EAAEC,SAAS,MAAA,CAAA,EAE/DC,QAAS,CAAC,SAAA,CAAA,CAEd,CAGI,GAAAT,EAAaU,KAAMH,GAAMA,EAAEL,OAASzB,EAAe,UAAa,EAC3D,MAAA,CACLI,QACE,gBACAJ,EACA,gMAEN,EAEM,MAAAgC,EAAUT,EAAa9B,IAAKqC,GAAMhB,GAAQgB,EAAEL,IAE5C,CAAA,EAAAS,EAAiBF,EAAQrC,OAAQwC,GAAAA,CAAO9C,GAAgB+C,SAASD,CAAAA,CAAAA,EACnE,GAAAD,EAAe/B,SAAW,EACrB,MAAA,CACLC,QAAS,sBAAsB8B,EAAelB,KAAK,IAEvD,CAAA,EAAA,EAEA,MAAMqB,EAAef,EAAI3B,OAAQ6B,GAAcQ,CAAAA,EAAQC,KAAMK,GAAWd,EAASe,WAAWD,EAAS,GACjG,CAAA,CAAA,EAAA,GAAAD,EAAalC,SAAW,EACnB,MAAA,CACLC,QAAS,uCAAuCiC,EAAa5C,IAAKqC,GAAMA,EAAEL,IAAAA,EAAMT,KAAK,IAEzF,CAAA,EAAA,EAEM,MAAAwB,EAAyBC,MAAAA,QAAQC,IACrCnB,EAAa9B,IAAKqC,GAChBA,EAAEhC,MAAM,QAAA,EAAU6C,MAAOC,GAEvB,CAAA,MAAM,IAAIC,MAAM,WAAW7C,CAAyB4C,aAAAA,CAAAA,EAAAA,CAAK,CAK3D,CAAA,CAAA,EAAA,GAAA,CAACJ,EAAiBM,MAAOhB,GAAMA,IAAMU,EAAiB,CAAA,CAAA,EACjD,MAAA,CACLpC,QAAS,gBAAkBJ,EAAe,wCAAA,EAK9C,MAAM0B,EAAAA,MAAoB7B,GAAgB2C,EAAiB,CAAA,EAAIxC,GAE/D,MAAI,YAAa0B,EACRA,EAGF,CACLC,QAASD,EACTE,QAAStC,OAAOC,KAAK+B,EAAIO,KAAOlC,EAAAA,OAAQmC,GAAMA,EAAEC,SAAS,KAAUD,GAAAA,EAAEC,SAAS,MAAWD,GAAAA,EAAEC,SAAS,MACpGC,CAAAA,EAAAA,QAAAA,CAAAA,CACF,CAEDW,EAAAA,MAAOC,IAAS,CACfxC,QAAS,0BAA4BwC,CAAAA,EAAAA,EAKhCG,GAAyB,CACpC/C,EACAgD,IAEAC,GAAW,CACT/B,KAAMgC,GACJC,KAAUC,YAAYtD,MAAOoB,EAAMmC,IAAAA,CACjC,GAAM,EAAA,SAAUnC,GAAQ,SAAUA,GAAQ,SAAUA,GAAO,CACzDmC,EAAIC,SAAS,CACXlD,QAAS,qBACTmD,KAAMC,GAAiBC,SAEzB,MACF,CAEA,MAAMxD,EAAAA,MAAegB,GAAeC,EAAMlB,GAE1C,GAAI,YAAaC,EAAQ,CACvBoD,EAAIC,SAAS,CACXlD,QAASH,EAAOG,QAChBmD,KAAMC,GAAiBC,SAEzB,MACF,CAEAT,EAAYU,IAAIzD,CAAAA,CAAyB,IAG7C0D,UAAWC,GAAAA,EACXC,UAAWD,GAAAA,CAAAA,CAAAA,4LCzI2BE,GAAAT,OAAW,IAAE,2NAA/CU,EAAsDzB,EAAA0B,EAAAC,2BAApBC,EAAA,SAAAJ,KAAAA,GAAAT,IAAW,GAAA,IAAE,KAAAc,EAAAC,EAAAN,CAAAA,0MAM5BO,EAAAhB,KAAG,MAAM,EAAA,mFAEgBjD,CAAO,KAAA,CAAA,GAAAA,CAAAA,cAAPA,CAAAA,IAAOA,EAAA,QAAA,CAAA,CAAA,iCAKhD,IAAAkE,EAAAjB,GAAMnC,EAAAA,MAAIqD,GAAAlB,KAOVA,EAAQ,CAAA,GAAAmB,GAAAnB,CAAAA,2DAdmB,IAAA,+LAAA,IAAA,2cADhCU,EAMKzB,EAAAmC,EAAAR,CAAAA,EALHS,EAAuCD,EAAAE,CAAAA,qBACvCD,EAAAA,EAAoGD,EAAAG,+FADjF,EAAA,CAAAC,GAAAX,EAAA,MAAAG,KAAAA,EAAAhB,GAAG,EAAA,MAAA,EAAM,KAAAc,EAAAW,EAAAT,iEAOzBhB,KAAMnC,uEAONmC,EAAQ,CAAA,wVAXyBS,GAAAT,IAAW,GAAA,IAAE,2NAA/CU,CAAAA,EAAsDzB,EAAA0B,EAAAC,0BAApB,CAAAC,EAAA,SAAAJ,KAAAA,GAAAT,OAAW,IAAE,KAAAc,EAAAC,EAAAN,CAAAA,uMAMhCO,EAAAhB,KAAG,WAAW,EAAA,SAAc0B,GAAA1B,EAAM,CAAAnC,EAAAA,KAAK8D,MAAQ,WAAS,aACxDC,EAAA5B,KAAG,aAAW,SAAc6B,EAAAC,GAAY9B,EAAM,CAAA,EAAAnC,KAAKkE,IAAI,EAAA,2EADvC,GAAA,oEACA,GAAA,2IADA,8IACA,+MAFjCrB,EAGKzB,EAAAmC,EAAAR,GAFHS,EAA+ED,EAAAY,CAAzEX,EAAAA,EAAmCW,EAAAC,CAAAA,4BAAsCZ,EAAAA,EAAKD,EAAAc,QACpFb,EAAAA,EAA8ED,EAAAe,CAAxEd,EAAAA,EAAmCc,EAAAC,CAAAA,+CAD1BvB,EAAA,KAAAG,KAAAA,EAAAhB,GAAG,EAAA,WAAA,EAAW,KAAAc,EAAAW,EAAAT,CAAc,EAAAH,EAAA,IAAAa,KAAAA,GAAA1B,EAAM,CAAA,EAAAnC,KAAK8D,MAAQ,WAAS,KAAAb,EAAAuB,EAAAX,CAAAA,EACxDb,EAAA,KAAAe,KAAAA,EAAA5B,GAAG,EAAA,WAAA,EAAW,KAAAc,EAAAwB,EAAAV,CAAc,EAAAf,EAAA,IAAAgB,KAAAA,EAAAC,GAAY9B,EAAM,CAAAnC,EAAAA,KAAKkE,IAAI,EAAA,KAAAjB,EAAAyB,EAAAV,CAAAA,8JAOrDb,EAAAhB,KAAG,WAAS,WAAcA,EAAQ,CAAA,EAAC1B,QAAQkE,QAAO,qCAW3BxC,EAAQ,CAAC1B,EAAAA,QAAQlB,YAAW,4BAGnCqF,EAAAzC,EAAS,CAAA,EAAArB,QAAQhB,KAAK,MAAI,8BAZpD,OAAAqC,EAAS,GAAA1B,QAAQoE,aAAeC,OAASC,2BAc3CC,EAAA7C,EAAS,CAAA,EAAA1B,QAAQwE,UAAYH,QAASI,GAAA/C,CAAAA,0BAetCA,EAAQ,CAACzB,EAAAA,SAAWyB,KAASzB,QAAQzB,OAAS,EAACkG,2GA/BrB,uXAAA,utBAFjCtC,CAAAA,EAgDKzB,EAAAmC,EAAAR,CAAAA,EA/CHS,EAaGD,EAAA6B,CAZD5B,EAAAA,EAA8E4B,EAAAjB,CAAxEX,EAAAA,EAAiCW,EAAAC,+BAA2BZ,EAAMW,EAAAkB,6BAWxE7B,EAA+E4B,EAAAd,GAAzEd,EAA8Bc,EAAAC,iBAA+Bf,EAAMc,EAAAgB,CAAAA,SAG3E9B,EAAyED,EAAAgC,CAAnE/B,EAAAA,EAAyB+B,EAAAC,eAA8BhC,EAAAA,EAAM+B,EAAAE,EAAAA,6DAdlDzC,EAAA,KAAAG,KAAAA,EAAAhB,KAAG,SAAS,EAAA,KAAAc,EAAAW,EAAAT,CAAAA,eAAchB,EAAQ,CAAA,EAAC1B,QAAQkE,QAAO,KAAA1B,EAAAuB,EAAAX,CAAAA,gFAW3B1B,EAAQ,CAAC1B,EAAAA,QAAQlB,YAAW,KAAA0D,EAAAyB,EAAAV,CAAAA,EAGnChB,EAAA,IAAA4B,KAAAA,EAAAzC,EAAS,CAAA,EAAArB,QAAQhB,KAAK,IAAA,EAAI,KAAAmD,EAAAyC,EAAAd,CAEtD,EAAAzC,EAAS,CAAA,EAAA1B,QAAQwE,UAAYH,8SAV3B3B,EAAAhB,KAAG,oCAAkC,SACrCA,EAAQ,CAAA,EAAC1B,QAAQkE,QAAO,iEAAC,mGAAA,8GAF5B9B,EAGMzB,EAAA0B,EAAAC,+CAFH,CAAAC,EAAA,KAAAG,KAAAA,EAAAhB,KAAG,kCAAkC,EAAA,KAAAc,EAAAW,EAAAT,gBACrChB,EAAQ,CAAC1B,EAAAA,QAAQkE,QAAO,KAAA1B,EAAA0C,EAAAC,yKAJSzD,EAAQ,CAAC1B,EAAAA,QAAQoE,WAAU,4WAA/DhC,CAAAA,EAA4EzB,EAAA0B,EAAAC,CAAtES,EAAAA,EAA4BV,EAAA+C,eAA8BrC,EAAAA,EAAMV,EAAAuB,CAAAA,gCAAlClC,EAAQ,CAAA,EAAC1B,QAAQoE,WAAU,KAAA5B,EAAA0C,EAAAC,2LAetDzC,EAAAhB,KAAG,gBAAc,gBACnBA,EAAY,yBAAjBlD,OAAI6G,GAAA,6EADsB,wJAAA,yLAD9BjD,EAWGzB,EAAAgE,EAAArC,CAVDS,EAAAA,EAAsC4B,EAAAS,iBAAArC,EAAK4B,EAAAf,2EAAlC,IAAArB,EAAA,KAAAG,KAAAA,EAAAhB,GAAG,EAAA,cAAA,EAAc,KAAAc,EAAAW,EAAAT,eACnBhB,EAAY,sBAAjBlD,OAAI6G,GAAA,EAAA,mHAAJ7G,6ZAKE4D,EAAazB,EAAA0B,EAAAC,CAAAA,uJAFNH,EAAAT,IAAW0C,EAAAA,WAAU,mLAA5BhC,EAAmCzB,EAAA0B,EAAAC,2BAA5BC,EAAA,KAAAJ,KAAAA,EAAAT,IAAW0C,EAAAA,WAAU,KAAA5B,EAAAC,EAAAN,qKAFrBO,EAAAhB,IAAW4D,EAAAA,KAAI,6BACnB,OAAA5D,MAAW0C,WAAUmB,uEADD,sGAAA,kIAAzBnD,CAAAA,EAAmCzB,EAAAyE,EAAA9C,CAAAA,2CAMnCF,EAAKzB,EAAAiD,EAAAtB,oBANIC,EAAA,KAAAG,KAAAA,EAAAhB,IAAW4D,EAAAA,KAAI,KAAA9C,EAAAW,EAAAT,gRAsBvBP,EAAAT,KAAG,kCAAkC,EAAA,4RAF1CU,EAIGzB,EAAAgE,EAAArC,GAHDS,EAEM4B,EAAAtC,2BADHE,EAAA,KAAAJ,KAAAA,EAAAT,KAAG,oCAAkC,KAAAc,EAAAC,EAAAN,sJAT/BO,EAAAhB,KAAG,SAAS,EAAA,WACd8D,EAAAC,GAAA/D,KAASzB,8BAAdzB,OAAI6G,GAAA,6EADiB,GAAA,qJAAA,4LADzBjD,EAMGzB,EAAAgE,EAAArC,GALDS,EAAiC4B,EAAAS,iBAAArC,EAAK4B,EAAAf,CAAAA,0EAA7B,IAAArB,EAAA,KAAAG,KAAAA,EAAAhB,KAAG,SAAS,EAAA,KAAAc,EAAAW,EAAAT,CAAAA,QACd8C,EAAAC,GAAA/D,GAASzB,EAAAA,OAAAA,oBAAdzB,OAAI6G,GAAA,EAAA,mHAAJ7G,+MACOkD,EAAM,EAAA,EAAA,gPAAbU,EAAoBzB,EAAA0B,EAAAC,iBACpBF,EAAAA,EAAKzB,EAAAiD,EAAAtB,CAAAA,gCADEZ,EAAM,EAAA,EAAA,KAAAc,EAAAW,EAAAT,CAAAA,0LAsBeP,GAAAT,OAAW,IAAE,4NAA/CU,CAAAA,EAAsDzB,EAAA0B,EAAAC,CAAAA,yBAApB,CAAAC,EAAA,SAAAJ,KAAAA,GAAAT,IAAW,GAAA,IAAE,KAAAc,EAAAC,EAAAN,qYAOJT,EAAe,EAAA,EAAA,6PAA1DU,EAAgEzB,EAAAmC,EAAAR,2CAArBZ,EAAe,IAAA,KAAAgE,EAAAf,EAAAgB,0bA/FrDjD,EAAAhB,GAAG,EAAA,WAAA,EAAW,gEAoFZkE,EAAAlE,GAAG,EAAA,WAAA,EAAW,yBAQhBmE,GAAAnE,GAAG,EAAA,SAAA,EAAS,iBASpBoE,GAAApE,GAAG,EAAA,2BAAA,EAA2B,WAA8BqE,GAAArE,KAAG,gBAAgB,EAAA,wGA9F/BjD,CAAO,KAAA,CAAA,GAAAA,eAAPA,CAAOA,IAAAA,EAAA,QAAA,yCAKpDiD,CAAAA,EAAO,IAAAsE,GAAAtE,CAAAA,oEA2EwCjD,CAAAA,KAAO,CAAA,GAAAA,eAAPA,CAAOA,IAAAA,EAAA,QAAA,yHAMhDwH,EAAAA,GAAAC,EAAAC,GAASzE,EAAO,IAAA0E,iGA7FD,IAAA,uNAoFE,IAAA,8FAQJ,iFAS+D,yDAKjD1E,EAAU,gBAC5CA,EAAU,CAAA,CAAA,uNA3GY,IAAA,sjBAoFE,IAAA,yOAQJ,GAAA,mNAS+D,GAAA,0JAKjDA,EAAU,mCAC5CA,EAAU,sRA1GwBA,KAAMQ,YAAS,QAAAmE,GAAA,IAAA3E,EAAA,EAAA,EAAA4E,KAAAC,8MAoF6C,EAAA,oqBAzFvGnE,EAmHMzB,GAAA6F,EAAAlE,CAAAA,EAlHJS,EAiHKyD,EAAAC,GAhHH1D,EAYK0D,EAAAC,GAXH3D,EAOO2D,EAAAC,GANL5D,EAA+B4D,EAAAjD,wBAC/BX,EAIQ4D,EAAAJ,CAAAA,EAHNxD,EAAmCwD,EAAAK,CACnC7D,EAAAA,EAAiCwD,EAAAM,CACjC9D,EAAAA,EAAuCwD,EAAAO,CAHNC,EAAAA,GAAAR,EAAA7E,KAAMQ,UAAS,EAAA,mDAgFtDa,EAiBK0D,EAAAO,GAhBHjE,EAQKiE,EAAAC,CAPHlE,EAAAA,EAGOkE,EAAAC,CAAAA,EAFLnE,EAA+BmE,EAAArD,CAAAA,sBAC/Bd,EAAAA,EAAkGmE,EAAAC,CAArCC,EAAAA,GAAAD,EAAAzF,GAAMM,EAAAA,SAAAA,gCAMvEe,EAMKiE,EAAAK,CAAAA,EALHtE,EAA4BsE,EAAAvC,CAAAA,2FAQhC/B,EAEK0D,EAAAa,iBAD+BvE,EAAAA,EAAoDuE,EAAAC,2BAGxFxE,EAKK0D,EAAAe,IAJHzE,EAGQyE,GAAAC,EAFN1E,EAAAA,EAAoD0E,GAAAC,EAAAA,8IA1G7CxE,CAAAA,IAAAX,EAAA,MAAAG,KAAAA,EAAAhB,GAAG,EAAA,WAAA,EAAW,KAAAc,EAAAW,EAAAT,SACcqE,GAAAR,EAAA7E,GAAMQ,EAAAA,SAAAA,mEAWvCR,EAAO,CAAA,oGAwEA,CAAAwB,IAAAX,EAAA,MAAAqD,KAAAA,EAAAlE,KAAG,WAAW,EAAA,KAAAc,EAAAmF,EAAA/B,SACwCwB,GAAAD,EAAAzF,KAAMM,2EAO9D,GAAA,CAAAkB,IAAAX,EAAA,MAAAsD,MAAAA,GAAAnE,GAAG,EAAA,SAAA,EAAS,KAAAc,EAAAoF,GAAA/B,aACXtD,EAAA,KAAA2D,KAAAA,EAAAC,GAASzE,EAAO,CAAA,CAAA,IAAAuE,GAAAC,EAAAE,EAAAA,eAQzBlD,CAAAA,IAAAX,EAAA,MAAAuD,MAAAA,GAAApE,KAAG,2BAA2B,EAAA,KAAAc,EAAAqF,GAAA/B,EAAAA,GAA8B5C,CAAAA,IAAAX,EAAA,MAAAwD,MAAAA,GAAArE,KAAG,gBAAgB,EAAA,KAAAc,EAAAsF,GAAA/B,EAAAA,mBAK3CrE,EAAU,qBAC5CA,EAAU,khBA9IF,KAAAlB,CAAAA,EAAAA,GAAMuH,oCAEV1J,CAAoB2J,EAAAA,YACpBC,CAAAA,EAA8CD,iBAC9CE,EAAa,CACtBlG,UAAW,GACXE,UAAWiG,GAAmBC,OAAAA,CAAAA,gBAErBC,GAAkBL,cAClBM,EAAaC,EAAG,cAAcP,CAAAA,EAAAA,EAE9BQ,CAAAA,QAAAA,EAAU,EAAKR,EAAAA,EAEpB,MAAAS,EAAUC,GAAAA,sCAEZ,IAAAC,EAAW,GAET,MAAAC,EAAgBxH,GAAuB/C,EAAcoK,SACnDI,EAAIC,KAAEA,GAASC,GAAU,CAChBb,gBACfc,QAASC,GAAS,CAAGC,OAAQN,CAAAA,CAAAA,EAAkBO,IAC/ClB,SAAWmB,GAAAA,CACTC,EAAA,EAAAV,EAAW,IACXV,EAASqB,GAAcF,EAAWR,CAAAA,CAAAA,EAAgBlJ,KAAI,IAAA2J,EAAA,EAAQV,EAAW,IAAK,8uBAazCY,EAAMrH,UAASsH,GAAAC,2BAoFaF,CAAAA,EAAMvH,UAASyH,KAAAxL,wkCA7FjFyL,EAAWH,EAAMvH,WAAwB,mBACzCqH,EAAA,EAAAM,EAAeC,GAAU5J,SAASwE,SAASxG,OAAQ6L,GAAOA,CAAAA,EAAEC,UAAU,GAAA,CAAA,CAAA"}