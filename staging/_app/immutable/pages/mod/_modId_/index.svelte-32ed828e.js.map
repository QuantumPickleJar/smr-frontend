{"version":3,"file":"index.svelte-32ed828e.js","sources":["../../../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../../../src/lib/utils/schema.ts","../../../../../../../../src/routes/mod/[modId]/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import Card, { Content } from '@smui/card';\n  import { prettyDate, prettyNumber } from '$lib/utils/formatting';\n  import CompatibilityButton from './compatibility/CompatibilityButton.svelte';\n\n  export let mod!: Pick<Mod, 'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference' | 'compatibility'>;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"text-lg break-words\">\n      <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n      <span\n        ><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n      ><br />\n      <span><strong>Created:</strong> {prettyDate(mod.created_at)}</span><br />\n      <span><strong>Views:</strong> {prettyNumber(mod.views)}</span><br />\n      <span><strong>Downloads:</strong> {prettyNumber(mod.downloads)}</span><br />\n      <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n      {#if mod.compatibility}\n        <span><strong>Compatibility:</strong><CompatibilityButton compatibility={mod.compatibility} /> </span><br />\n      {/if}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import { Icon } from '@smui/common';\n  import { prettyDate } from '$lib/utils/formatting';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    release: 'new_releases',\n    beta: 'warning',\n    alpha: 'report'\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n      {#each Object.keys(stabilities) as stability}\n        {#if latestVersions[stability]}\n          <div class=\"version\">\n            <div class=\"text-4xl w-14 h-14 p-2.5\">\n              <Icon class=\"material-icons\">{stabilities[stability]}</Icon>\n            </div>\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n                >Version {latestVersions[stability].version}</a>\n              <div>{prettyDate(latestVersions[stability].created_at)}</div>\n            </div>\n            <div class=\"text-3xl w-14 h-14 p-2.5\">\n              <a\n                href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n                class=\"text-yellow-500 underline\">\n                <Icon class=\"material-icons\">download</Icon>\n              </a>\n            </div>\n          </div>\n        {/if}\n      {/each}\n    </div>\n  </Content>\n</Card>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { assets, base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n      <div class=\"grid auto-rows-min text-lg gap-y-4\">\n        {#each authors as author}\n          <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n            <div\n              class=\"rounded-full bg-cover w-14 h-14\"\n              style={`background-image: url(\"${author.user.avatar || assets + '/images/no_image.webp'}\")`} />\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n              <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n            </div>\n          </div>\n        {/each}\n      </div>\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n  import type { CompatibilityInfoInput } from '$lib/generated';\n  import OutdatedBanner from '$lib/components/mods/compatibility/OutdatedBanner.svelte';\n\n  export let modLogo!: string;\n  export let modName!: string;\n  export let compatibility: CompatibilityInfoInput;\n\n  $: logo = modLogo || assets + '/images/no_image.webp';\n</script>\n\n<div class=\"relative overflow-hidden\">\n  <OutdatedBanner {compatibility} logo={true} />\n  <img class=\"rounded-lg sm:max-w-lg max-w-full w-full\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n  import Card, { Content } from '@smui/card';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<Card class=\"h-fit\">\n  <Content>\n    <div class=\"markdown-content break-words\">\n      {#await description then descriptionRendered}\n        <p>{@html descriptionRendered}</p>\n      {/await}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { operationStore, query } from '@urql/svelte';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import DataTable, { Head, Body, Row, Cell } from '@smui/data-table';\n  import Button, { Label, Icon } from '@smui/button';\n  import { installMod } from '$lib/stores/launcher';\n  import { prettyDate, prettyNumber, prettyBytes } from '$lib/utils/formatting';\n\n  export let modId!: string;\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  const versions = operationStore(GetModVersionsDocument, {\n    mod: modId,\n    limit: 100,\n    offset: 0\n  });\n\n  query(versions);\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n<Card class=\"h-fit\">\n  {#if $versions.fetching}\n    <Content>Loading...</Content>\n  {:else if $versions.error}\n    <Content>Oh no... {$versions.error.message}</Content>\n  {:else}\n    <DataTable class=\"max-w-full\">\n      <Head>\n        <Row>\n          <Cell>Version</Cell>\n          <Cell>Stability</Cell>\n          <Cell>SML Version</Cell>\n          <Cell>Downloads</Cell>\n          <Cell>Upload Date</Cell>\n          <Cell><!-- Buttons --></Cell>\n        </Row>\n      </Head>\n      <Body>\n        {#each $versions.data.getMod.versions as version}\n          <Row on:click={() => toggleRow(version.id)}>\n            <Cell>{version.version}</Cell>\n            <Cell>{version.stability}</Cell>\n            <Cell>{version.sml_version}</Cell>\n            <Cell>{prettyNumber(version.downloads)}</Cell>\n            <Cell>{prettyDate(version.created_at)}</Cell>\n            <Cell>\n              <div class=\"grid grid-flow-col gap-4\">\n                <Button variant=\"outlined\" href={base + '/mod/' + modId + '/version/' + version.id}>View</Button>\n                <Button variant=\"outlined\" href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n                  >Download</Button>\n                <Button variant=\"outlined\" on:click={() => installMod($versions.data.getMod.mod_reference)}>\n                  <Label>Install</Label>\n                  <Icon class=\"material-icons\">download</Icon>\n                </Button>\n              </div>\n            </Cell>\n          </Row>\n\n          {#if expandedVersions.has(version.id)}\n            <Row>\n              <Cell colspan={6}>\n                <div class=\"col-span-3 p-2\">Size: {prettyBytes(version.size)}</div>\n                <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n                <div class=\"col-span-6 p-2 markdown-content\">\n                  {#await markdown(version.changelog) then changelogRendered}\n                    {@html changelogRendered}\n                  {/await}\n                </div>\n              </Cell>\n            </Row>\n          {/if}\n        {/each}\n      </Body>\n    </DataTable>\n  {/if}\n</Card>\n","import type { Thing, WithContext } from 'schema-dts';\nimport type { Mod } from '$lib/generated';\nimport { assets } from '$app/paths';\n\nexport type Schema = Thing | WithContext<Thing>;\n\nexport function serializeSchema(schema: Schema) {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema)}</script>`;\n}\n\nexport const modSchema = (mod: Pick<Mod, 'name' | 'logo' | 'short_description'>): Schema => ({\n  '@context': 'https://schema.org',\n  '@type': 'CreativeWork',\n  image: mod.logo || assets + '/images/no_image.webp',\n  name: mod.name,\n  description: mod.short_description\n});\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n  import { operationStore } from '@urql/svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { loadWaitForNoFetch } from '$lib/utils/gql';\n\n  const modQ = operationStore(GetModDocument, { mod: undefined });\n\n  export const load = paramsToProps(async (input) => {\n    modQ.variables.mod = input.params.modId;\n    return loadWaitForNoFetch({\n      mod: modQ\n    })(input);\n  });\n</script>\n\n<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import { mutation } from '@urql/svelte';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { get, writable } from 'svelte/store';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Button from '@smui/button';\n  import Dialog, { Title, Content as DialogContent } from '@smui/dialog';\n  import { modSchema, serializeSchema } from '$lib/utils/schema';\n\n  export let modId!: string;\n  export let mod: typeof modQ;\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const deleteMod = mutation({\n    query: DeleteModDocument\n  });\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.mod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n\n  const deleteDialogOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    deleteMod({ modId: get(mod).data.mod.id }).then((value) => {\n      if (value.error) {\n        console.error(value.error.message);\n        errorMessage = 'Error deleting mod: ' + value.error.message;\n        errorToast = true;\n      } else {\n        // TODO Toast or something\n        goto(base + '/mods');\n      }\n    });\n  };\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description={$mod.data.mod.short_description}\n      title={$mod.data.mod.name}\n      image={$mod.data.mod.logo} />\n\n    {@html serializeSchema(modSchema($mod.data.mod))}\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.mod}\n  <div class=\"grid gap-6 xlx:grid-flow-row\">\n    <div class=\"flex flex-wrap h-auto justify-between items-center\">\n      <h1 class=\"text-4xl font-bold\">{$mod.data.mod.name}</h1>\n      <div>\n        {#if canUserEdit}\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/edit')}>Edit</Button>\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(true)}>Delete</Button>\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/new-version')}>New Version</Button>\n        {/if}\n\n        <Button variant=\"outlined\" on:click={() => (versionsTab = !versionsTab)}>\n          {#if !versionsTab}\n            Versions\n          {:else}\n            Description\n          {/if}\n        </Button>\n      </div>\n    </div>\n    <div class=\"grid grid-auto-max auto-cols-fr gap-4\">\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.mod} />\n      {:else}\n        <ModVersions modId={$mod.data.mod.id} />\n      {/if}\n      <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n        <ModLogo\n          modLogo={$mod.data.mod.logo}\n          modName={$mod.data.mod.name}\n          compatibility={$mod.data.mod.compatibility} />\n        <ModInfo mod={$mod.data.mod} />\n        <ModLatestVersions modId={$mod.data.mod.id} latestVersions={$mod.data.mod.latestVersions} />\n        <ModAuthors authors={$mod.data.mod.authors} />\n      </div>\n    </div>\n  </div>\n\n  {#if canUserEdit}\n    <Dialog bind:open={$deleteDialogOpen}>\n      <Title>Delete Mod?</Title>\n      <DialogContent>\n        <div class=\"grid grid-flow-row gap-4\">\n          <span>Are you sure you wish to delete this mod</span>\n\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(false)}>Cancel</Button>\n          <Button variant=\"outlined\" on:click={() => deleteModFn()}>Delete</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  {/if}\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n"],"names":["compatibility","ctx","insert_hydration","target","span","anchor","append_hydration","strong","br","dirty","compatibilitybutton_changes","t4_value","source_url","prettyDate","created_at","prettyNumber","views","downloads","t20_value","mod_reference","if_block","create_if_block","attr","a","a_href_value","div","h3","span0","strong0","br0","span1","strong1","br1","span2","strong2","br2","span3","strong3","br3","span4","strong4","br4","current","set_data","t4","t8","t8_value","t12","t12_value","t16","t16_value","t20","mod","$$props","version","a0","a0_href_value","base","id","a1","a1_href_value","API_REST","div4","div0","div2","div1","div3","t2","t2_value","t_value","Object","keys","length","i","each_blocks","stabilities","release","beta","alpha","latestVersions","modId","user","username","t3_value","role","charAt","toUpperCase","slice","toLowerCase","div0_style_value","avatar","assets","t1","t1_value","t3","authors","img","img_src_value","modLogo","modName","logo","p","innerHTML","raw_value","info","handle_promise","promise","$$invalidate","description","full_description","markdown","short_description","t","stability","sml_version","html_tag","prettyBytes","size","hash","changelog","show_if","has","each_value","data","getMod","versions","error","message","fetching","expandedVersions","Set","operationStore","GetModVersionsDocument","limit","offset","query","toggleRow","versionId","delete","add","click_handler","installMod","$versions","schema","JSON","stringify","modSchema","image","name","serializeSchema","title","metadescriptors_changes","t0_value","create_if_block_6","create_if_block_3","h1","t0","modlogo_changes","modlatestversions_changes","modauthors_changes","create_if_block_5","props","modversions_changes","create_if_block_7","modQ","GetModDocument","undefined","load","paramsToProps","async","variables","input","params","loadWaitForNoFetch","versionsTab","errorMessage","errorToast","deleteMod","mutation","DeleteModDocument","deleteDialogOpen","writable","deleteModFn","get","then","value","console","goto","set","click_handler_2","click_handler_3","$deleteDialogOpen","canUserEdit","$user","roles","deleteContent","$mod","findIndex","author","user_id"],"mappings":"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"}